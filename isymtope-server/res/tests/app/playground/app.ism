use html;
use thunk;

store {
    let workspaces = [
        {id: "todomvc", name: "todomvc", description: "The famous TodoMvc demo", demo: true, default: true, index: "app.ism", files: [
            {id: "app.ism", path: "app.ism", name: "app.ism", caption: "ISM", language: "isymtope", main: true}
        ]},
        {id: "shopping", name: "shopping", description: "Very basic shopping cart", demo: true, index: "app.ism", files: [
            {id: "app.ism", path: "app.ism", name: "app.ism", caption: "ISM", language: "isymtope", main: true}
        ]},
        {id: "playground", name: "playground", description: "This application", demo: true, index: "app.ism", files: [
            {id: "app.ism", path: "app.ism", name: "app.ism", caption: "ISM", language: "isymtope", main: true},
            {id: "app.js", path: "app.js", name: "app.js", caption: "JS", language: "javascript"},
            {id: "app.css", path: "app.css", name: "app.css", caption: "CSS", language: "css"}
        ]}
    ];
    let activeWorkspaceId = "todomvc";
    let activeFileId = "app.ism";

    let selectDemoOpen = false;

    workspaces {}

    activeWorkspaceId {
        action setWorkspaceId(workspaceId) => workspaceId;
    }

    activeFileId {
        action setFileId(fileId) => fileId;
    }

    editorEvents {
        action contentChanged() => true;
    }

    selectDemoOpen {
        action toggle => !state;
        action hide => false;
    }

    extern externApp;
    extern compiler;
}

component fileLink(fileData,  activeFileId) {
    li(class = {isActive: (fileData.id == activeFileId)}) {
        a(href="#", class="btn btn-small") || {
            dispatch setFileId(fileId: fileData.id) to activeFileId;
            dispatch switchFile(fileId: fileData.id) to externApp;
        }
        {
            ( fileData.caption )
        }
    }
}

component listWorkspaceFiles(workspaceData, activeFileId) {
    ul(class="editorFiles") {
        fileLink(for fileData in workspaceData.files, activeFileId = activeFileId) {}
        li(class="updatePreview") {
            button(id="compileButton", href="#", class="btn btn-small", disabled=(activeFileId != "app.ism")) || { dispatch compileCurrent to externApp; }  { ("Compile >") }
        }
    }
}

component editor() {
    div(class="editorWrap") {
        div(class="editorButtons") {
            listWorkspaceFiles(query workspace_data(get workspaces, get activeWorkspaceId) as workspaceData, get activeFileId) {}
        }
        div(class="editorMain") {
            div(id="editorComponent") {
                extern {
                    div(id="editor") {}
                }
            }
        }
    }
}

component preview() {
    div(id="previewWrap", class="isBlank isPrerender") {
        div(id="previewStatus") {
            span(id="previewStatusMsg") { ("Prerendered preview, choose Compile to rebuild") }
        }
        div(id="previewComponent") {
            iframe(id="preview", src="about:blank") {}
            div(id="previewOverlay") {
                span(class="loadingImg") {}
            }
        }
    }
}

query workspace_data(workspaces, activeWorkspaceId) {
    (workspaces.filter(item.id == activeWorkspaceId).first()) where (true);
}

query file_data(files, activeFileId) {
    (files.filter(item.id == activeFileId).first()) where (true);
}

route "/" || {
    dispatch init(workspaces: get workspaces, workspaceId: "todomvc", fileId: "app.ism") to externApp;
    dispatch setWorkspaceId(workspaceId: "todomvc") to activeWorkspaceId;
    dispatch setFileId(fileId: "app.ism") to activeFileId;
}

link(rel="stylesheet", href="app.css", type="text/css") {}
script(src="https://unpkg.com/monaco-editor@0.7.0/min/vs/loader.js", type="text/javascript", defer="defer") {}
script(src="https://www.hellorust.com/demos/bundle.js", type="text/javascript", defer="defer") {}
script(src="app.js", type="text/javascript") {}

component demoMenuBodyItem(workspaceData, activeWorkspaceId) {
    p()
        click || {
            dispatch setWorkspaceId(workspaceId: workspaceData.id) to activeWorkspaceId;
            dispatch switchWorkspace(workspaceId: workspaceData.id) to externApp;
            dispatch hide to selectDemoOpen;
        }
    {
        a(href="#", class={isActive: (workspaceData.id == activeWorkspaceId)})
        {
            (workspaceData.name)
        }
    }
}

component demoMenuBodyItems(workspaces, activeWorkspaceId) {
        demoMenuBodyItem(for workspaceData in workspaces, activeWorkspaceId) {}
}

component demoMenuBody(selectDemoOpen, workspaces, activeWorkspaceId) {
            nav(class="choose-demo-nav", class={hidden: (!selectDemoOpen)}) {
                demoMenuBodyItems(workspaces, activeWorkspaceId) {}
            }
}

component demoMenu(selectDemoOpen, workspaces, activeWorkspaceId) {
    div(class="choose-demo-container") {
        a(href="#", class="choose-demo") || { dispatch toggle to selectDemoOpen; } { ("Choose Demo â–¼") }
        demoMenuBody(selectDemoOpen, workspaces, activeWorkspaceId) {}
    }
}

div {
    header(class="site-header") {
        h1(class="site-title") { ("Isymtope ") span(class="site-section-title") { ("Playground") } }
        nav(class="right-nav") {
            ul() {
                li() {
                    a(href="https://isymtope.org") { ("About") }
                }
                li(class="separator") { ("|") }
                li(class="active") {
                    a(href="#") { ("Playground") }
                }
            }
        }
    }

    header(class="app-header") {
        nav(class="right-nav") {
            demoMenu(get selectDemoOpen, get workspaces, get activeWorkspaceId) {}
        }
    }

    div(class="topLayout") {
        div(class="main") {
            div(class="splitScreen") {
                div(class="splitEditor") {
                        editor() {}
                }

                div(class="splitPreview") {
                        preview() {}
                }
            }
        }
    }
}
