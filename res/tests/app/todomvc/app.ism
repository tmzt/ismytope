use html;

store {
    let todos = [{text: "One", complete: true, id: 0}, {text: "Two", complete: false, id: 1}];
    let entry = "";
    let counter = 0;

    todos {
        action add(entry) => state + (entry + {complete: false, id: (value.map(item.id).max(x) + 1)});
        action set_complete(entry) => value.map({text: item.text, complete: entry.complete, id: item.id} where item);
    }

    entry {
        action clear => "";
    }

    counter {
        action increment => state + 1;
    }
}

component todo_text_input (todo) {
    p {}
}

component todo_item (todo) {
    li (class="completed") {
        div (class="view") {
            input(class="toggle", type="checkbox") bind todo.complete as complete
                click || { dispatch set_complete(entry: {complete: complete}); } {}
            label { (todo.text) }
            button(class="destroy") {}
        }
     }
}

component new_todo (entry) {
    input(class="new-todo", placeholder="What needs to be done?", autofocus="autofocus") bind entry
        enterkey || { dispatch add(entry: {text: entry}); } {}
}

link(rel="stylesheet", href="./node_modules/todomvc-common/base.css", type="text/css") {}
link(rel="stylesheet", href="./node_modules/todomvc-app-css/index.css", type="text/css") {}

section(class="todoapp") {
    header(class="header") {
        h1() { ("todos") }
        new_todo(get entry) {}
    }

    section(class="main") {
        input(class="toggle-all", id="toggle-all", type="checkbox") {}
        label(class="", for="toggle-all") { ("Mark all as complete") }
        ul(id="todo-list", class="todo-list") {
            todo_item (for todo in todos) {}
        }
    }
}